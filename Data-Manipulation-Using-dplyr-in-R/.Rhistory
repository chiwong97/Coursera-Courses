install.packages("devtools")
library(devtools)
install.packages("installr")
library(installr)
updateR()
install.packages("devtools")
library(devtools)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
install.packages("devtools")
library(devtools)
install.packages("devtools")
sessionInfo()
install.packages("rlang")
install.packages("devtools")
library(devtools)
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
names(nycflights)
?nycflights
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>%
filter(dest="SFO", month==2)
sfo_feb_flights <- nycflights %>%
filter(dest=="SFO", month==2)
View(sfo_feb_flights)
View(sfo_feb_flights)
ggplot(data=sfo_feb_flights, aes(x=arr_delay)) +
geom_histogram(binwidth=30)
ggplot(data=sfo_feb_flights, aes(x=arr_delay)) +
geom_histogram()
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
View(nycflights)
View(sfo_feb_flights)
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay))
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay)) %>%
arrange(desc(iqr_ad))
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
View(nycflights)
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60))
nycflights %>%
group_by(tailnum) %>%
arrange(desc(avg_speed))
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60))
nycflights %>%
group_by(tailnum) %>%
arrange(desc(avg_speed)) %>%
select(tailnum, avg_speed)
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60)) %>%
group_by(tailnum) %>%
arrange(desc(avg_speed)) %>%
select(tailnum, avg_speed)
ggplot(data=nycflights, aes(x = distance, y=avg_speed)) + geom_point()
View(nycflights)
data(nycflights)
View(nycflights)
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60))
nycflights %>%
group_by(tailnum) %>%
arrange(desc(avg_speed)) %>%
select(tailnum, avg_speed)
ggplot(data=nycflights, aes(x = distance, y=avg_speed)) + geom_point()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
View(nycflights)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = sum(arr_type == "on time")/n())
library(statsr)
library(dplyr)
library(ggplot2)
data(kobe_basket)
force(kobe_basket)
?kobe_basket
View(kobe_basket)
kobe_streak <- calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) +
geom_histogram(binwidth = 1)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(coin_outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
table(sim_unfair_coin)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(0.45,0.55))
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(0.45,0.55))
sim_basket
table(sim_basket)
sim_streak = calc_streak(sim_basket)
ggplot(data = sim_streak, aes(x=length)) + geom_histogram(binwidth=1)
pnorm(-1, mean=0, sd=1)
pnorm(-2, mean=0, sd=1)
pnorm(-1.6, mean = 0, sd=1)
pnorm(1800, mean = 1500, sd=300)
pnorm(24, mean = 21, sd = 5)
qnorm(0.1, mean = 21, sd = 5)
qnorm(34,mean=24,sd=4)
pnorm(34, mean=24, sd=4)
setwd("C:/Users/User/OneDrive - The University of Melbourne/Projects/Coursera-Courses/Data-Manipulation-Using-dplyr-in-R")
## 1.2: Install the gapminder package from the packages tab
install.packages("gapminder")
## 2.1: Load the dplyr package
library(dplyr)
## 2.2: Load the gapminder package
library(gapminder)
?gapminder
gapminder
## 2.4: Check the structure of the dataset
glimpse(gapminder)
## This will give the same result
str(gapminder)
## 3.1: Select the country and continent columns
gapminder %>%
select(country, continent)
## 3.2: Store the result of 3.1 in a variable called country_con
country_con <- gapminder %>%
select(country, continent)
View(country_con)
## 3.3: Print out the variable
country_con
## 4.1: Filter the gapminder dataset for the year 1962
gapminder %>%
filter(year == 1962)
## 4.2: Filter for China in 2002
gapminder %>%
filter(country == "China", year == 2002)
## 5.1: Sort in ascending order of lifeExp
gapminder %>%
arrange(lifeExp)
#% 5.3: Filter for the year 1962,
## then arrange in descending order of population
gapminder %>%
filter(year == 1962) %>%
arrange(desc(pop))
## 5.2: Sort in descending order of lifeExp and
## select the top fifteen
gapminder %>%
arrange(desc(lifeExp)) %>%
slice(1:15)
#% 5.3: Filter for the year 1962,
## then arrange in descending order of population
gapminder %>%
filter(year == 1962) %>%
arrange(desc(pop))
## 6.1: Use mutate to change lifeExp to be in months
gapminder %>%
mutate(lifeExp = 12 * lifeExp)
## 6.2: Use mutate to create a new column called lifeExpMonths
gapminder %>%
mutate(lifeExpMonths = 12 * lifeExp)
## 6.3: Filter, mutate, and arrange the gapminder dataset
## Retrieve the life expectancy in months for the year 2007.
## Store the result in a new column called lifeExpMonths
## Sort the result in descending order
gapminder %>%
filter(year == 2007) %>%
mutate(lifeExpMonths = lifeExp * 12) %>%
arrange(desc(lifeExpMonths))
## 7.1: Summarize to find the median life expectancy
gapminder %>%
summarize(medianLifeExp = median(lifeExp))
## 7.2: Filter for 1962 then summarize the median life expectancy
gapminder %>%
filter(year == 1962) %>%
summarize(medianLifeExp = median(lifeExp))
## 7.3: Filter for 1962 then summarize the median life expectancy
## and the maximum GDP per capita
gapminder %>%
filter(year == 1962) %>%
summarize(medianLifeExp = median(lifeExp), maxGDPperCap = max(gdpPercap))
## 8.1: Find median life expectancy and maximum GDP per capita in each year
gapminder %>%
group_by(year) %>%
summarize(medianLifeExp = median(lifeExp), maxGDPperCap = max(gdpPercap))
## 8.2: Find median life expectancy and maximum GDP per
## capita in each continent in 1962
gapminder %>%
filter(year == 1962) %>%
group_by(continent) %>%
summarise(medianLifeExp = median(lifeExp),
maxGDPperCap = max(gdpPercap)) %>%
arrange(desc(medianLifeExp))
## 8.3: Find median life expectancy and maximum GDP per capita
## in each continent/year combination
gapminder %>%
group_by(year, continent) %>%
summarise(medianLifeExp = median(lifeExp),
maxGDPperCap = max(gdpPercap))
year_cont <-gapminder %>%
group_by(year, continent) %>%
summarise(medianLifeExp = median(lifeExp),
maxGDPperCap = max(gdpPercap))
View(year_cont)
length(gapminder)
slice(gapminder)
