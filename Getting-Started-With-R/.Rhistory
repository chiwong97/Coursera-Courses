install.packages("devtools")
library(devtools)
install.packages("installr")
library(installr)
updateR()
install.packages("devtools")
library(devtools)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
install.packages("devtools")
library(devtools)
install.packages("devtools")
sessionInfo()
install.packages("rlang")
install.packages("devtools")
library(devtools)
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
names(nycflights)
?nycflights
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>%
filter(dest="SFO", month==2)
sfo_feb_flights <- nycflights %>%
filter(dest=="SFO", month==2)
View(sfo_feb_flights)
View(sfo_feb_flights)
ggplot(data=sfo_feb_flights, aes(x=arr_delay)) +
geom_histogram(binwidth=30)
ggplot(data=sfo_feb_flights, aes(x=arr_delay)) +
geom_histogram()
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
View(nycflights)
View(sfo_feb_flights)
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay))
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay)) %>%
arrange(desc(iqr_ad))
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
View(nycflights)
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60))
nycflights %>%
group_by(tailnum) %>%
arrange(desc(avg_speed))
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60))
nycflights %>%
group_by(tailnum) %>%
arrange(desc(avg_speed)) %>%
select(tailnum, avg_speed)
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60)) %>%
group_by(tailnum) %>%
arrange(desc(avg_speed)) %>%
select(tailnum, avg_speed)
ggplot(data=nycflights, aes(x = distance, y=avg_speed)) + geom_point()
View(nycflights)
data(nycflights)
View(nycflights)
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60))
nycflights %>%
group_by(tailnum) %>%
arrange(desc(avg_speed)) %>%
select(tailnum, avg_speed)
ggplot(data=nycflights, aes(x = distance, y=avg_speed)) + geom_point()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
View(nycflights)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = sum(arr_type == "on time")/n())
library(statsr)
library(dplyr)
library(ggplot2)
data(kobe_basket)
force(kobe_basket)
?kobe_basket
View(kobe_basket)
kobe_streak <- calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) +
geom_histogram(binwidth = 1)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(coin_outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
table(sim_unfair_coin)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(0.45,0.55))
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(0.45,0.55))
sim_basket
table(sim_basket)
sim_streak = calc_streak(sim_basket)
ggplot(data = sim_streak, aes(x=length)) + geom_histogram(binwidth=1)
pnorm(-1, mean=0, sd=1)
pnorm(-2, mean=0, sd=1)
pnorm(-1.6, mean = 0, sd=1)
pnorm(1800, mean = 1500, sd=300)
pnorm(24, mean = 21, sd = 5)
qnorm(0.1, mean = 21, sd = 5)
qnorm(34,mean=24,sd=4)
pnorm(34, mean=24, sd=4)
## Print Hello World
print('Hello World')
## Find the square root of 16 and store it in a variable called y
y <- sqrt(16)      #Square root function
## Assign x to 1, y to 2 and z to 3
## 3 ways of assigning variables:
x = 1
y <- 2
z -> 3
## Assign x to 1, y to 2 and z to 3
## 2 ways of assigning variables:
x = 1
y <- 2
z <- 3
## Print Hello World
print('Hello World')
## Add 15 to 5 and store it in a variable called y
y <- 15 + 5
## Find the square root of 16 and store it in a variable called y
y <- sqrt(16)      #Square root function
## Find the square root of 16
y
# Call y, see y value in console
y
# Call x, see x value in console
x
# Call small z
z
# Call capital Z
Z
# Store the value in a variable Z
Z <- 8
# Call small z
z
# Call capital Z
Z
### 2.3: Adding Object Together
a <- x + Z
## 2.4: What do you think will be the result of this?
c <- w + z
## Set the variable y to "Hello" (Character Type)
y <- "Hello"
# Store z to the character 'World'
z <- "World"
## 2.4: What do you think will be the result of this?
c <- y + z
## 2.5: Check the data type of the variable a
class(a)
## 2.6: Set a variable num to 8.5
num = 8.5
print(num)   ## Call the variable num
class(num)    ## This is used to check the data type of a variable
## 2.7: Change numeric data type to integer
int <- as.integer(num)
class(int)  ## Check the data type of the variable int
class(w)   # Check the data type of the variable w
### Character
w <- "Hello"
class(w)   # Check the data type of the variable w
char <- as.character(a)
class(char)
bool = TRUE
class(bool)
## 2.10: Store movie ratings in a variable called fac
fac <- factor(c("3 stars", "2 stars", "1 star"))
class(fac)   ## Check the data type
## 2.11: Check how many levels and the data type of the levels
levels(fac)
nlevels(fac)
class(levels(fac))
## 2.10: Store movie ratings in a variable called fac
fac <- factor(c("3 stars", "2 stars", "1 star", 2))
class(fac)   ## Check the data type
## 2.11: Check how many levels and the data type of the levels
levels(fac)
nlevels(fac)
class(levels(fac))
## 2.10: Store movie ratings in a variable called fac
fac <- factor(c("3 stars", "2 stars", "1 star"))
class(fac)   ## Check the data type
## 2.11: Check how many levels and the data type of the levels
levels(fac)
nlevels(fac)
class(levels(fac))
## 2.12: Check all variables and objects that have been defined
ls()
## 3.1: Create a vector of the marks of 4 students
## use c() to store several values in one variable
marks <- c(14,26,28,30)
## 3.2: Check the data type of the vector
class(marks)
## 3.3: Check the length of the variable
length(marks)
## 3.4: Indexing and Slicing
marks[3]               ## Returns the 4th mark
## 3.4: Indexing and Slicing
marks[4]               ## Returns the 4th mark
marks[0]               ## Returns the 2nd, 3rd and 4th marks
marks[2:4]               ## Returns the 2nd, 3rd and 4th marks
## (Ex.) What do you think the result will be?
marks[-1]
marks[-2]
marks[-1:-2]
## 3.5: Create a character vector
char_vec <- c("a", "b", "c", "d")
## 3.6 (Ex.): Check the data type and length of the vector
class(char_vec)
length(char_vec)
## 3.7 (Ex.): Retrieve the 1st, 2nd and 3rd characters in the char_vec vector
char_vec[1:3]
## 3.8: Create the variable char_num_vec to take numeric and character types
char_num_vec <- c("a", 3, "b", 4)
## 3.9 (Ex.) : What do you think will be the data type of the vector?
class(char_num_vec)
## 3.10: Create a vector of odd numbers
seq(1, 14, by=2)
## 3.10: Create a vector of odd numbers
odd_vec <- seq(1, 14, by=2)
# 4.1: Create matrix with values from marks, 2 rows and 2 columns
matrix1 <- matrix(data=marks, nrow=2, ncol=2)
# Call the matrix created
matrix1
## 4.2: Change byrow to TRUE
matrix1 <- matrix(data=marks, nrow=2, ncol=2, byrow=TRUE)
# Call the matrix created
matrix1
# 4.1: Create matrix with values from marks, 2 rows and 2 columns
matrix1 <- matrix(data=marks, nrow=2, ncol=2)
# Call the matrix created
matrix1
## 4.2: Change byrow to TRUE
matrix2 <- matrix(data=marks, nrow=2, ncol=2, byrow=TRUE)
# Call the matrix created
matrix2
# 4.3: Create vector with 9 integers from 1 to 9
int <- c(1:9)
matrix3 <- matrix(data=int, nrow = 3, ncol = 3)
matrix3
# 4.4: Access value on second row, second column
matrix3[2][2]
# 4.4: Access value on second row, second column
matrix3[2,2]
# 4.5: Access second row
matrix3[2,]
# 4.6: Access second column
matrix3[,2]
# 4.7: Access sub-matrix with components on both
# first 2 rows and first 2 columns
matrix3[1:2,1:2]
# 4.8: Access sub-matrix with components that are
# not on 3rd row and 3rd column
matrix3[-3,-3]
## 5.1: Create data frame with 2 columns: marks and char_vec
df <- data.frame(char_vec, marks)
class(df)     ## Look at data frame's overall type
df
## 5.2: Check the structure of each variable/feature in the data frame
str(df)
# 5.3: Look at columns' data types
class(df)
# 5.3: Look at columns' data types
class(df$char_vec)
# 5.3: Look at columns' data types
class(df$)
# 5.3: Look at columns' data types
class(df$char_vec)
# 5.4: Call a column in a data frame
df[,1]
# 5.4: Call a column in a data frame
df[,2]
# 5.4: Call a column in a data frame
df[,0]
# 5.5: Create sub data frame with first 3 rows only
df1 <- df[1:3,]
df1
data <- data.frame(
Name = c("Olayinka", "Ayomikun", "Juliet"),
Age = c(24, 21, 19),
Height = c(1.67, 1.60, 1.66),
Salary = c(25000, 12000, 10000)
)
## Call the data frame
print(data)
class(data)  ## Check the data type
nrow(data)  # This returns the number of rows in the data frame
ncol(data)  # This returns the number of columns in the data frame
data1 <- data.frame(
Name = c("Daniel", "Yusuf"),
Age = c(23, 26),
Height = c(1.68, 1.69),
Salary = c(35000, 37000)
)
## rbind - A row bind appends new values in row fashion
df2 <- rbind(data, data1)
df2
## cbind - A column bind appends new values in column fashion
df3 <- cbind(df2, Gender, LastName)
## Create two new columns; Gender and LastName
Gender = c("M", "F", "F", "M", "M")
LastName = c("Arimoro", "Isijola", "James", "Akinbote", "Khalid")
## cbind - A column bind appends new values in column fashion
df3 <- cbind(df2, Gender, LastName)
## Check the dataframe and its structure
df3
str(df3)
# 6.1: Create a list with 4 objects
list <- list(char_vec, marks, matrix1, df)
list
# Access the first and second objects
list[[1]]
list[[2]]
# (Ex.): Access the third and fourth objects
list[[3]]
list[[4]]
# 6.3: Call First row of 3rd list's objects.
list[[3]][1,]
install.packages("readr")
install.packages("readxl")
# load package in R session
library(readr)
## Load in Rsession to use read_excel() fucntion
library(readxl)
# 7.3: Set working directory (tells R where to import files from/export files to)
setwd("C:\Users\User\OneDrive - The University of Melbourne\Projects\Coursera-Courses\Getting-Started-With-R")
# 7.3: Set working directory (tells R where to import files from/export files to)
setwd("C:/Users/User/OneDrive - The University of Melbourne/Projects/Coursera-Courses/Getting-Started-With-R")
# Get working directory
getwd()
# read.table() function to import .txt files
txtdata <- read.table("dataset.txt", header=TRUE)
txtdata
## See all data
View(txtdata)
## See first 5 rows
head(txtdata)
# load readr for read_csv() function
library(readr)
## See first 5 rows
head(txtdata, 5)
## See last rows
tail(txtdata)
## Check the structure of the data
str(txtdata)
## Check the summary of the data
summary(txtdata)
## Change column's type to character
## Sales column is overwritten by
## "character" version of Sales column
txtdata$Sales <- as.character()
## Change column's type to character
## Sales column is overwritten by
## "character" version of Sales column
txtdata$Sales <- as.character(txtdata$Sales)
## Check the structure of the data
str(txtdata)
## Change column's type to factor
txtdata$sales <- as.factor(txtdata$Sales)
str(txtdata)
# read.table() function to import .txt files
txtdata <- read.table("dataset.txt", header=TRUE)
txtdata
## Change column's type to factor
txtdata$Sales <- as.factor(txtdata$Sales)
str(txtdata)
# read.table() function to import .txt files
# I will add a sep= "," for comma separated files
orange <- read.table(file="Orange_comma_separated.txt", header=TRUE, sep=",")
head(orange)
## Check the summary of the data
summary(orange)
## Check the structure of the data
str(orange)
## (Ex.): Change the Tree feature to factor
orange$Tree <- as.factor(orange$Tree)
## Check the structure of the data
str(orange)
str(orange)
# load readr for read_csv() function
library(readr)
#  Use read.csv() to import .csv files and explore it
diabetes <- read.csv("diabetes.csv")
## (Ex.) Check the data type
class(diabetes)
diabetes
head(diabetes)
## (Ex.) Retrieve the first 5 rows
head(diabetes, 5)
## (Ex.) Check the number of rows and columns
dim(diabetes)
## (Ex.) Check the structure of the data
str(diabetes)
## (Ex.) Check the summary of the data
summary(diabetes)
## Use read_excel() to import xlsx documents
exdata <- read_excel(file="dataset.xlsx")
## Use read_excel() to import xlsx documents
exdata <- read_excel("dataset.xlsx")
head(exdata, 5)
## Check the data type
class(exdata)
# Make the data a proper data frame object
exdata <- as.data.frame(exdata)
class(exdata)
str(exdata)
