install.packages("devtools")
library(devtools)
install.packages("installr")
library(installr)
updateR()
install.packages("devtools")
library(devtools)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
install.packages("devtools")
library(devtools)
install.packages("devtools")
sessionInfo()
install.packages("rlang")
install.packages("devtools")
library(devtools)
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
names(nycflights)
?nycflights
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>%
filter(dest="SFO", month==2)
sfo_feb_flights <- nycflights %>%
filter(dest=="SFO", month==2)
View(sfo_feb_flights)
View(sfo_feb_flights)
ggplot(data=sfo_feb_flights, aes(x=arr_delay)) +
geom_histogram(binwidth=30)
ggplot(data=sfo_feb_flights, aes(x=arr_delay)) +
geom_histogram()
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
View(nycflights)
View(sfo_feb_flights)
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay))
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay)) %>%
arrange(desc(iqr_ad))
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
View(nycflights)
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60))
nycflights %>%
group_by(tailnum) %>%
arrange(desc(avg_speed))
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60))
nycflights %>%
group_by(tailnum) %>%
arrange(desc(avg_speed)) %>%
select(tailnum, avg_speed)
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60)) %>%
group_by(tailnum) %>%
arrange(desc(avg_speed)) %>%
select(tailnum, avg_speed)
ggplot(data=nycflights, aes(x = distance, y=avg_speed)) + geom_point()
View(nycflights)
data(nycflights)
View(nycflights)
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60))
nycflights %>%
group_by(tailnum) %>%
arrange(desc(avg_speed)) %>%
select(tailnum, avg_speed)
ggplot(data=nycflights, aes(x = distance, y=avg_speed)) + geom_point()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
View(nycflights)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = sum(arr_type == "on time")/n())
library(statsr)
library(dplyr)
library(ggplot2)
data(kobe_basket)
force(kobe_basket)
?kobe_basket
View(kobe_basket)
kobe_streak <- calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) +
geom_histogram(binwidth = 1)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(coin_outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
table(sim_unfair_coin)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(0.45,0.55))
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(0.45,0.55))
sim_basket
table(sim_basket)
sim_streak = calc_streak(sim_basket)
ggplot(data = sim_streak, aes(x=length)) + geom_histogram(binwidth=1)
pnorm(-1, mean=0, sd=1)
pnorm(-2, mean=0, sd=1)
pnorm(-1.6, mean = 0, sd=1)
pnorm(1800, mean = 1500, sd=300)
pnorm(24, mean = 21, sd = 5)
qnorm(0.1, mean = 21, sd = 5)
qnorm(34,mean=24,sd=4)
pnorm(34, mean=24, sd=4)
## Install the required package
install.packages(c("tidyverse","readxl"))
setwd("C:/Users/User/OneDrive - The University of Melbourne/Projects/Coursera-Courses/Tidy-messy-data-using-tidyr-in-R")
## Let's get an idea of the arguments the function contains
?pivot_longer
install.packages("tidyverse")
## Load the tidyverse package into the R workspace
library(tidyverse)
## Let's get an idea of the arguments the function contains
?pivot_longer
## Let's create a sample data
table1 <- tibble(
country = c("A", "B", "C"),
`1999` = c("0.7K", "37K", "212K"),
`2000` = c("2K", "80K", "213K")
)
?tibble
## Print the data
table1
## Use pivot_longer to reshape the data
table1 %>%
pivot_longer(c('1999', '2000'))
## Print the data
table1
## Use pivot_longer to reshape the data
table1 %>%
pivot_longer(c('1999', '2000'))
## Pivot on all the other columns except the country column
table1 %>%
pivot_longer(-country)
## Overwrite its name with year
## The value column should be named n_cases
table1 %>%
pivot_longer(-country, names_to = "year", values_to = "n_cases")
## Using the gather function
table1 %>%
gather(-country, key = 'year', value = 'n_cases')
## Read the documentation of gather
?gather
## Let's get an idea of the arguments the function contains
?pivot_wider
## Read in the planet-data.csv using the read_csv() function
planet_df = read_csv("planet-data.csv")
## Print the first six rows of the data using the head() function
head(planet_df)
## Change this long data to wide form
## Give each planet variable its own column
planet_df %>%
pivot_wider(planet, names_from = 'metric', values_from = 'value')
## Quick note about spread()
?spread
## Read in nukes.csv into R
nukes_df <- read_csv("nukes.csv")
## Print the first 5 rows and all columns
nukes_df %>%
print(n = 5, width = Inf)
## Pivot all columns except for year to a longer format.
nukes_df %>%
pivot_longer(-year)
## Overwrite the names of the two new columns
## The name column should be named country
## The value column should be named n_bombs
nukes_df %>%
pivot_longer(-year, names_to = 'Country', values_to = 'n_bombs')
## Replace the NA values in the n_bombs column
## with integer zero values (0L).
nukes_df %>%
pivot_longer(-year, names_to = "country", values_to = "n_bombs") %>%
replace_na(list(n_bombs = 0L))
## Plot the number of bombs per country over time
## Create a line plot where the number of bombs dropped
## per country is plotted over time. Use country to color the lines.
nukes_df %>%
pivot_longer(-year, names_to = "country", values_to = "n_bombs") %>%
replace_na(list(n_bombs = 0L)) %>%
ggplot(aes(x = year, y = n_bombs, color = country)) +
geom_line()
## Load the PlantGrowth data
data("PlantGrowth")
## Print the data
PlantGrowth
?PlantGrowth
## Split this data into the different treatment groups
unstack(PlantGrowth)
## Load the diets.csv data set using read_csv()
diet <- read_csv("DIETS.csv")
## Explore the data using
## head() and tail() functions
head(diet)
tail(diet)
## Unstack the data
unstack(diet)
## The solution
diet.data <- unstack(diet, WTLOSS ~ DATA)
## The solution
diet.data <- unstack(diet, WTLOSS ~ DIET)
## Check the first 5 rows of the new data
head(diet.data)
## Check the first 5 rows of the new data
head(diet.data, n=5)
## Question 1:
## As an R user with an understanding of the tidyr package.
## You have been tasked to replace the missing values in
## the cty (city miles per gallon) column of the mpg
## data set with the value 5. Write a code to achieve this task.
data(mpg)
head(mpg)
## Let's get an idea of the arguments the function contains
?separate_rows
mpg %>%
replace_na(list(cty = 5L))
## Let's get an idea of the arguments the function contains
?separate_rows
## Import the netflix_data.csv using the read_csv() function
## Save it as net_data
net_data = read_csv('netflix_data.csv')
## Print the first six rows of the data using the head() function
head(net_data)
## Separate the actors in the cast column over multiple rows
net_data %>%
separate_rows(cast, sep = ', ')
## Find which six actors have the most appearances
net_data %>%
separate_rows(cast, sep = ', ') %>%
rename(actor = cast) %>%
count(actor, sort = TRUE) %>%
head(n = 5)
## Find which six actors have the most appearances
net_data %>%
separate_rows(cast, sep = ', ') %>%
rename(actor = cast) %>%
count(actor, sort = TRUE) %>%
head(n = 6)
net_data %>%
separate_rows(cast, sep = ', ') %>%
rename(actor = cast) %>%
summarize(max(actor))
## Let's get an idea of the arguments the function contains
?separate
## Let's get an idea of the arguments the function contains
?separate
## Let's get an idea of the arguments the function contains
?separate
## Read the movies_duration.csv using the read_csv() function
movies_data <- read_csv("movies_duration.csv")
## Print the first six rows of the data using the head() function
head(movies_data)
## Split the duration column into value and unit columns
movies_data %>%
separate(duration, into=c('value', 'unit'), sep=' ', convert=TRUE)
## Find the average duration for each type and unit
movies_data %>%
separate(duration, into=c('value', 'unit'), sep=' ', convert=TRUE) %>%
group_by(type, unit) %>%
summarize(mean(value))
## Find the average duration for each type and unit
movies_data %>%
separate(duration, into=c('value', 'unit'), sep=' ', convert=TRUE) %>%
group_by(type, unit) %>%
summarize(mean_duration = mean(value))
## Join the title and type columns using sep = ' - '
movies_data %>%
unite(title_type, title, type, sep =' - ')
## Join the title and type columns using sep = ' - '
movies_data %>%
unite(title_type, title, type, sep =' - ') %>%
separate(duration, into=c('value', 'unit'), sep= ' ', convert = TRUE)
## Load the netflix_directors.csv data using read_csv()
netflix_directors = read_csv(netflix_directors.csv)
## Load the netflix_directors.csv data using read_csv()
netflix_directors = read_csv('netflix_directors.csv')
## Print director_df to see what string
## separates directors in the director column.
head(netflix_directors)
## Spread the values in the director column over separate rows.
netflix_directors %>%
separate_rows(director, sep = ', ')
## Spread the director column over separate rows
## Count the number of movies per director
netflix_directors %>%
separate_rows(director, sep = ', ') %>%
count(director, sort = TRUE) %>%
## Drop rows with NA values in the director column using drop_na()
## and recount the number of movies per director
###########################################################
## Task Eleven: Separate rows & Separate
## In this task, you will learn how to combine the
## separate_rows() and separate() functions to tidy data
###########################################################
## Load and print the drink.xlsx data using read_excel()
drink_df <- read_excel("drink.xlsx")
## Spread the director column over separate rows
## Count the number of movies per director
netflix_directors %>%
separate_rows(director, sep = ', ') %>%
count(director, sort = TRUE) %>%
## Drop rows with NA values in the director column using drop_na()
## and recount the number of movies per director
###########################################################
## Task Eleven: Separate rows & Separate
## In this task, you will learn how to combine the
## separate_rows() and separate() functions to tidy data
###########################################################
## Load and print the drink.xlsx data using read_excel()
drink_df <- read_excel("drink.xlsx")
## Spread the director column over separate rows
## Count the number of movies per director
netflix_directors %>%
separate_rows(director, sep = ', ') %>%
count(director, sort = TRUE) %>%
## Drop rows with NA values in the director column using drop_na()
## and recount the number of movies per director
###########################################################
## Task Eleven: Separate rows & Separate
## In this task, you will learn how to combine the
## separate_rows() and separate() functions to tidy data
###########################################################
## Load and print the drink.xlsx data using read_excel()
drink_df <- read_excel("drink.xlsx")
## Spread the director column over separate rows
## Count the number of movies per director
netflix_directors %>%
separate_rows(director, sep = ', ') %>%
count(director, sort = TRUE)
## Drop rows with NA values in the director column using drop_na()
## and recount the number of movies per director
netflix_directors %>%
drop_na() %>%
separate_rows(director, sep = ', ') %>%
count(director, sort = TRUE)
## Drop rows with NA values in the director column using drop_na()
## and recount the number of movies per director
netflix_directors %>%
drop_na(director) %>%
separate_rows(director, sep = ', ') %>%
count(director, sort = TRUE)
## Load and print the drink.xlsx data using read_excel()
drink_df <- read_excel("drink.xlsx")
library(readxl)
## Load and print the drink.xlsx data using read_excel()
drink_df <- read_excel("drink.xlsx")
drink_df
## Separate the ingredients column over rows
drink_df %>%
separate_rows(ingredients, sep = "; ")
## Separate the ingredients into three columns
## ingredient, quantity, and unit
drink_df %>%
separate_rows(ingredients, sep = "; ") %>%
separate(ingredients, into = c('ingredient', 'quantity', 'unit'), sep=' ')
## Separate the ingredients into three columns
## ingredient, quantity, and unit
drink_df %>%
separate_rows(ingredients, sep = "; ") %>%
separate(ingredients, into = c('ingredient', 'quantity', 'unit'), sep=' ', convert=TRUE)
## Separate the ingredients over rows
## Separate ingredients into three columns
## Group by ingredient and unit
## Calculate the total quantity of each ingredient
drink_df %>%
separate_rows(ingredients, sep = "; ") %>%
separate(ingredients, into = c('ingredient', 'quantity', 'unit'), sep=' ', convert=TRUE) %>%
group_by(ingredient, unit) %>%
summarize(total_quantity = sum(quantity))
## Recall the wide data from task three
planet_df %>%
pivot_wider(planet, names_from = "metric", values_from = "value")
## Plot the distance to the sun and temperature
## Plot planet temperature (y-axis) over distance to sun (x-axis)
planet_df %>%
pivot_wider(planet, names_from = "metric", values_from = "value") %>%
ggplot(aes(x = distance_to_sun, y = temperature)) +
geom_point(aes(size = diameter)) +
geom_text(aes(label = planet), vjust = -1) +
labs(x = "Distance to sun (million km)",
y = "Mean temperature (Celsius)") +
theme(legend.position = "none")
## Read and print the planet_wide.csv data
planet = read_csv('planet_wide.csv')
head(planet)
## Tidy the data set
planet %>%
pivot_wider(planet, names_from='metric')
head(planet_df)
?pivot_longer
## Tidy the data set
planet %>%
pivot_longer(planet, names_to = 'planet')
head(planet)
## Tidy the data set
planet %>%
pivot_longer(-metric, names_to = 'Planet')
## Tidy the data set
planet %>%
pivot_longer(-metric, names_to = 'Planet') %>%
unstack(metric)
## Tidy the data set
planet %>%
pivot_longer(-metric, names_to = 'Planet') %>%
unstack(planet)
## Tidy the data set
planet %>%
pivot_longer(-metric, names_to = 'Planet') %>%
pivot_wider(planet, names_from = 'metric', values_from='value')
## Tidy the data set
planet %>%
pivot_longer(-metric, names_to = 'Planet') %>%
pivot_wider(planet, names_from = 'metric', values_from='value')
## Read and print the planet_wide.csv data
planet = read_csv('planet_wide.csv')
## Tidy the data set
planet %>%
pivot_longer(-metric, names_to = 'Planet') %>%
pivot_wider(planet, names_from = 'metric', values_from='value')
## Tidy the data set
planet %>%
pivot_longer(-metric, names_to = 'Planet') %>%
pivot_wider(planet, names_from = 'metric', values_from = 'value')
rlang::last_error()
rlang::last_trace()
## Tidy the data set
planet %>%
pivot_longer(-metric, names_to = 'Planet') %>%
pivot_wider(Planet, names_from = 'metric', values_from = 'value')
## Create the plot
planet %>%
pivot_longer(-metric, names_to = 'Planet') %>%
pivot_wider(Planet, names_from = 'metric', values_from = 'value') %>%
ggplot(aes(x=diameter, y=number_of_moons)) +
geom_point(aes(size=diameter)) +
geom_text(aes(label=planet), vjust=-1) +
labs(x='Diameter (km)', y='Number of moons') +
theme(legend.position='none')
?pivot_longer
?pivot_wider
